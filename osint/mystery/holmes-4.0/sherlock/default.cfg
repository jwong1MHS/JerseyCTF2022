# Configuration variables of Sherlock and their default values
# (c) 2005--2008 Martin Mares <mj@ucw.cz>

# Include default settings of the UCW library (see there for details)
Include("ucw/default.cfg");

# The configuration files live here
Set("CONFIG_DIR", "cf");

# Installation directory for `make install'
Set("INSTALL_DIR" => "~/run-" . Get("SHERLOCK_VERSION"));

### Standard modules available in all releases of Sherlock ###

# Base of the Sherlock search engine
Set("CONFIG_SHERLOCK");

# The gatherer daemon
Set("CONFIG_GATHERD");

# The Shepherd daemon (requires CONFIG_SHEPHERD_PROTOCOL)
Set("CONFIG_SHEPHERD");

# Support for Shepherd protocols everywhere (distributed indexing etc.)
Set("CONFIG_SHEPHERD_PROTOCOL");

# ShepherD support for gathering by local subprocesses
UnSet("CONFIG_SHEPHERD_CHILDREN");

# Indexer
Set("CONFIG_INDEXER");

# Search server
Set("CONFIG_SEARCH");

# Watson: The Monitoring System
UnSet("CONFIG_WATSON");

### Optional Modules & Features ###

# Bucket position alignment shift (maximum bucket file size is 4G << this shift)
Set("CONFIG_BUCKET_SHIFT" => 7);

# Number of sections we remember limits for
Set("SHERLOCK_NUM_SECTIONS" => 4);

# Gathering of PDF files
Set("CONFIG_PDF");

# Searching by last modification time
Set("CONFIG_LASTMOD");

# Searching by file type
Set("CONFIG_FILETYPE");

# Language processing (requires CONFIG_FILETYPE)
Set("CONFIG_LIBLANG");
Set("CONFIG_LANG");

# Character sets
Set("CONFIG_CHARSET");

# The sherlock library
Set("CONFIG_SHERLOCK_LIB");

# Spelling checker
Set("CONFIG_SPELL");

# Enable indexing of context-dependent words and set maximum number
# of context slots (undef, 256 or 32768). Lower values save memory, higher time.
Set("CONFIG_MAX_CONTEXTS" => 256);

# Enable more than 16-bit word positions in references
Set("CONFIG_32BIT_REFERENCES");

# Debugging tools
UnSet("CONFIG_DEBUG_TOOLS");

# Search server: Enable EXPLAIN command (slows searching down slightly)
Set("CONFIG_EXPLAIN");

# Search server: Full support for all types of boolean expressions and ANY.
# (Otherwise, only expressions with at least one term matched positively are allowed.)
# It may be slow in some cases - for example `ANY' or `NOT "A"' queries.
UnSet("CONFIG_ALLOW_ANY");

# Include custom builtin functions in filtering language
UnSet("CONFIG_CUSTOM_FILTER");

# Gathering of images
UnSet("CONFIG_IMAGES");

# Selection of image libraries to use (libjpeg, libpng, libungif or GraphicsMagick)
Set("CONFIG_IMAGES_LIBJPEG");
Set("CONFIG_IMAGES_LIBPNG");
Set("CONFIG_IMAGES_LIBUNGIF");
UnSet("CONFIG_IMAGES_LIBGIF");
UnSet("CONFIG_IMAGES_LIBMAGICK");

# Compile libshxml library
UnSet("CONFIG_XML");

# Number of refresh frequencies we allow
Set("SHERLOCK_NUM_FREQS" => 5);

# Gathering and indexing split to areas
UnSet("CONFIG_AREAS");

# Site compression
UnSet("CONFIG_SITES");

# Dynamic weights
UnSet("CONFIG_WEIGHTS");

# Merge image duplicates
UnSet("CONFIG_IMAGES_DUP");

# Support for similar images
UnSet("CONFIG_IMAGES_SIM");

# Gathering of MS Word files
UnSet("CONFIG_MSWORD");

# Gathering of MS Excel files
UnSet("CONFIG_EXCEL");

# Gathering of WML files (needs CONFIG_XML)
UnSet("CONFIG_WML");

# Gathering of MP3 audio files
UnSet("CONFIG_MP3");

# Gathering of OGG Vorbis audio files
UnSet("CONFIG_OGG");

# Separate indexing of images and other objects
UnSet("CONFIG_INDEXER_IMAGES_ONLY");
UnSet("CONFIG_INDEXER_TEXT_ONLY");

# Force scanner to store the original bucket IDs for debug purposes
UnSet("CONFIG_INDEXER_STORE_OID");

### Features which are decided on automatically (see below), but which can be overriden ###

# The gatherer library
UnSet("CONFIG_GATHERER");

# The analyser library
UnSet("CONFIG_ANALYSER");

# The db-tool utility
UnSet("CONFIG_DBTOOL");

### These are internal settings which shouldn't be modified by custom configs ###

# Default configuration file
Set("DEFAULT_CONFIG" => "cf/sherlock");

# Environment variable with configuration file
Set("ENV_VAR_CONFIG" => "SH_CONFIG");

# Configuration of the language library
Set("CONFIG_LANG_DETECT" => 1);

# Maximum word length common for Sherlock and liblang, see comments in sherlock/index.h
Set("MAX_WORD_CHARS" => 64);
Set("MAX_WORD_BYTES" => 192);

# Tell the build system to compile everything locally
Set("CONFIG_LOCAL");

### Post-config hook that solves dependencies ###

PostConfig {
	### Decide whether we need the gatherer and analyser libraries ###
	if (IsSet("CONFIG_GATHERD") || IsSet("CONFIG_REAPD") || IsSet("CONFIG_SHEPHERD")) {
		Set("CONFIG_GATHERER");
	}
	if (IsSet("CONFIG_GATHERER") || IsSet("CONFIG_INDEXER")) {
		Set("CONFIG_ANALYSER");
	}

	### Configure at least one method of gathering in ShepherD ###
	if (IsSet("CONFIG_REAPD") ||
	    (IsSet("CONFIG_SHEPHERD") && !IsSet("CONFIG_FREE"))) {
		Set("CONFIG_REAPD_PROTOCOL");
	}
	if (!IsSet("CONFIG_REAPD_PROTOCOL")) {
		Set("CONFIG_SHEPHERD_CHILDREN");
	}

	### Make sure sure the Shepherd protocols are enabled when needed
	if (IsSet("CONFIG_SHEPHERD")) {
		Set("CONFIG_SHEPHERD_PROTOCOL");
	}

	### Do we need perl modules? ###
	if (IsSet("CONFIG_WATSON") || IsSet("CONFIG_ADMIN")) {
		Set("CONFIG_UCW_PERL_MODULES" => 1);
	}

	### Do we need db-tool? ###
	if (IsSet("CONFIG_GATHERD")) {
		Set("CONFIG_DBTOOL" => 1);
	}

	### Do we need filetype bit array to store language bits?
	if (IsSet("CONFIG_LANG")) {
		Set("CONFIG_FILETYPE");
	}

	### Do we need libshxml? ###
	if (IsSet("CONFIG_WML")) {
		Set("CONFIG_XML");
	}

	### Do we need libimages? ###
	if (IsSet("CONFIG_IMAGES_DUP") || IsSet("CONFIG_IMAGES_SIM")) {
		Set("CONFIG_IMAGES");
	}

	### Compatibility with old installations (pre-RFC 2396 URL escaping) ###
	if (IsSet("CONFIG_SHERLOCK")) {
		Set("CONFIG_URL_ESCAPE_COMPAT");
	}
};

# Return success
1;
